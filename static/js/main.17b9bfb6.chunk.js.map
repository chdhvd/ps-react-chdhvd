{"version":3,"sources":["components/Label/Label.js","components/TextInput/TextInput.js","components/ProgressBar/ProgressBar.js","components/EyeIcon/EyeIcon.js","components/PasswordInput/PasswordInput.js","../config/componentData.js","docs/examples/EyeIcon/ExampleEyeIcon.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","docs/examples/TextInputCSSModules/ExampleError.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TestInputStyledComponents/ExampleError.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","reportWebVitals.js","index.js"],"names":["Label","htmlFor","label","required","style","display","color","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","props","marginBottom","id","border","className","ProgressBar","getColor","percent","getWidthAsPercentOfTotalWidth","parseInt","width","this","height","backgroundColor","React","Component","defaultProps","EyeIcon","xmlns","viewBox","transform","fill","d","cx","cy","r","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","length","module","exports","EyeIconExample","ExampleOptional","ExampleRequired","ExampleAllFeatures","password","target","minLength","getQuality","Example100Percent","Example10Percent","Example70Percent","ExampleError","HelloWorld","message","ExampleHelloWorld","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","Object","getOwnPropertyNames","confirmationMessage","passwordQuality","ExampleRegistrationForm","console","log","Error","styled","div","Input","input","Fieldset","TextInputStyledComponents","TextInputBEM","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","resolve","Navigation","components","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","example","description","ExampleComponent","require","componentName","default","Props","key","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17b9bfb6.chunk.js","sourcesContent":["import React from 'react';\nimport Proptypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label}{required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: Proptypes.string.isRequired,\n\n  /** Label text */\n  label: Proptypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: Proptypes.bool\n};\n\nexport default Label;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen': 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgrap', width: width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  //** Bar width */\n  width: PropTypes.number.isRequired,\n\n  //** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"/\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;","module.exports = /* eslint-disable */ [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\",\"examples\":[{\"name\":\"ExampleEyeIcon\",\"description\":\"\",\"code\":\"import React from 'react';\\nimport EyeIcon from 'ps-react-chdhvd/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />\\n}\"}]},{\"name\":\"HelloWorld\",\"description\":\"A super lame component that says Hello with a custom message.\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'World'\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** A super lame component that says Hello with a custom message. */\\n\\nfunction HelloWorld({message}) {\\n  return <div>Hello {message}</div>\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: 'World'\\n};\\n\\nexport default HelloWorld;\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom message\",\"code\":\"import React from 'react';\\nimport HelloWorld from 'ps-react-chdhvd/HelloWorld';\\n\\n/** Custom message */\\n\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"Pluralsight viewers!\\\" />\\n}\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor, and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from 'react';\\nimport Proptypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({htmlFor, label, required}) {\\n  return (\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\n      {label}{required && <span style={{color: 'red'}}> *</span> }\\n    </label>\\n  )\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: Proptypes.string.isRequired,\\n\\n  /** Label text */\\n  label: Proptypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: Proptypes.bool\\n};\\n\\nexport default Label;\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\nimport Label from 'ps-react-chdhvd/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from 'react';\\nimport Label from 'ps-react-chdhvd/Label';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {\\n          showVisibilityToggle &&\\n          <a\\n            href=\\\"/\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}>\\n            <EyeIcon />\\n          </a>\\n        }\\n        {\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n        }\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React from 'react';\\nimport PasswordInput from 'ps-react-chdhvd/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: ''\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={ event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends React.Component {\\n  getColor = (percent) => {\\n    if (this.props.percent === 100) return 'green';\\n    return this.props.percent > 50 ? 'lightgreen': 'red';\\n  }\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  }\\n\\n  render() {\\n    const {percent, width, height} = this.props;\\n    return (\\n      <div style={{border: 'solid 1px lightgrap', width: width}}>\\n        <div style={{\\n          width: this.getWidthAsPercentOfTotalWidth(),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  //** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  //** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress and height 20px\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'ps-react-chdhvd/ProgressBar';\\n\\n/** 100% progress and height 20px */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />\\n}\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'ps-react-chdhvd/ProgressBar';\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />\\n}\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'ps-react-chdhvd/ProgressBar';\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />\\n}\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: ''\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = (event) => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({user});\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({email, password}) {\\n    const errors = {};\\n    const {minPasswordLength} = this.props;\\n\\n    if (!email) errors.email = 'Email required.';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({errors});\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const {user} = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({submitted: true});\\n    }\\n  }\\n\\n  render() {\\n    const {errors, submitted} = this.state;\\n    const {email, password} = this.state.user;\\n\\n    return (\\n      submitted ?\\n      <h2>{this.props.confirmationMessage}</h2> :\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={this.onChange}\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          required />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password} />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React from 'react';\\nimport RegistrationForm from 'ps-react-chdhvd/RegistrationForm';\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n  onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\n  }\\n}\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div style={{marginBottom: 16}}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInput from 'ps-react-chdhvd/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return(\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    )\\n  }\\n}\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\nimport TextInput from 'ps-react-chdhvd/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return(\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n      />\\n    )\\n  }\\n}\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && 'textinput__input--state-error'}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInputBEM from 'ps-react-chdhvd/TextInputBEM';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return(\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    )\\n  }\\n}\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styles from './textInput.css';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && styles.inputError}\\n        {...props}/>\\n        {children}\\n      {error && <div className={styles.error}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInputCSSModules from 'ps-react-chdhvd/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return(\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    )\\n  }\\n}\"}]},{\"name\":\"TextInputStyledComponents\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styled from 'styled-components';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  const Error = styled.div`\\n    color: red;\\n  `\\n\\n  const Input = styled.input`\\n    border: ${error && 'solid 1px red'};\\n    display: block;\\n  `\\n\\n  const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `\\n  return (\\n    <Fieldset>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        {...props}/>\\n        {children}\\n      {error && <Error>{error}</Error>}\\n    </Fieldset>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\",\"examples\":[]}]","import React from 'react';\nimport EyeIcon from 'ps-react-chdhvd/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />\n}","import React from 'react';\nimport Label from 'ps-react-chdhvd/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}","import React from 'react';\nimport Label from 'ps-react-chdhvd/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}","import React from 'react';\nimport PasswordInput from 'ps-react-chdhvd/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;","import React from 'react';\nimport ProgressBar from 'ps-react-chdhvd/ProgressBar';\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />\n}","import React from 'react';\nimport ProgressBar from 'ps-react-chdhvd/ProgressBar';\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />\n}","import React from 'react';\nimport ProgressBar from 'ps-react-chdhvd/ProgressBar';\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />\n}","import React from 'react';\nimport TextInput from 'ps-react-chdhvd/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return(\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    )\n  }\n}","import React from 'react';\nimport TextInput from 'ps-react-chdhvd/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return(\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n      />\n    )\n  }\n}","import React from 'react';\nimport TextInputCSSModules from 'ps-react-chdhvd/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return(\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    )\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** A super lame component that says Hello with a custom message. */\n\nfunction HelloWorld({message}) {\n  return <div>Hello {message}</div>\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: 'World'\n};\n\nexport default HelloWorld;","import React from 'react';\nimport HelloWorld from 'ps-react-chdhvd/HelloWorld';\n\n/** Custom message */\n\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Pluralsight viewers!\" />\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;","import React from 'react';\nimport RegistrationForm from 'ps-react-chdhvd/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  const Error = styled.div`\n    color: red;\n  `\n\n  const Input = styled.input`\n    border: ${error && 'solid 1px red'};\n    display: block;\n  `\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n        {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;","import React from 'react';\nimport TextInputStyledComponents from 'ps-react-chdhvd/TextInputStyledComponents';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return(\n      <TextInputStyledComponents\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    )\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && 'textinput__input--state-error'}\n        {...props}/>\n        {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;","import React from 'react';\nimport TextInputBEM from 'ps-react-chdhvd/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return(\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    )\n  }\n}","var map = {\n\t\"./EyeIcon/ExampleEyeIcon\": 22,\n\t\"./EyeIcon/ExampleEyeIcon.js\": 22,\n\t\"./HelloWorld/ExampleHelloWorld\": 32,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 32,\n\t\"./Label/ExampleOptional\": 23,\n\t\"./Label/ExampleOptional.js\": 23,\n\t\"./Label/ExampleRequired\": 24,\n\t\"./Label/ExampleRequired.js\": 24,\n\t\"./PasswordInput/ExampleAllFeatures\": 25,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 25,\n\t\"./ProgressBar/Example100Percent\": 26,\n\t\"./ProgressBar/Example100Percent.js\": 26,\n\t\"./ProgressBar/Example10Percent\": 27,\n\t\"./ProgressBar/Example10Percent.js\": 27,\n\t\"./ProgressBar/Example70Percent\": 28,\n\t\"./ProgressBar/Example70Percent.js\": 28,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 33,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 33,\n\t\"./TestInputStyledComponents/ExampleError\": 34,\n\t\"./TestInputStyledComponents/ExampleError.js\": 34,\n\t\"./TextInput/ExampleError\": 29,\n\t\"./TextInput/ExampleError.js\": 29,\n\t\"./TextInput/ExampleOptional\": 30,\n\t\"./TextInput/ExampleOptional.js\": 30,\n\t\"./TextInputBEM/ExampleError\": 35,\n\t\"./TextInputBEM/ExampleError.js\": 35,\n\t\"./TextInputCSSModules/ExampleError\": 31,\n\t\"./TextInputCSSModules/ExampleError.js\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 47;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({components}) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map(name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/highlight'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre ref={ref => { this.element = ref }}>\n        <code>\n          {this.props.children}\n        </code>\n      </pre>\n    )\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return {showCode: !prevState.showCode};\n    });\n  }\n\n  render() {\n    const {showCode} = this.state;\n    const {code, description, name} = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4> }\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"/\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({props}) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })\n      }\n      </tbody>\n    </table>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({component}) => {\n  const {name, description, props, examples} = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n        examples.map(example => <Example key={example.code} example={example} componentName={name} /> ) :\n        \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n        <Props props={props} /> :\n        \"This component accepts no props.\"\n      }\n    </div>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;","import React from 'react';\nimport Navigation from './Navigation';\nimport ComponentPage from './ComponentPage';\nimport componentData from '../../config/componentData';\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      this.setState({route: window.location.hash.substr(1)})\n    })\n  }\n\n  render() {\n    const {route} = this.state;\n    const component = route ? componentData.filter(component => component.name === route)[0] : componentData[0];\n\n    return (\n      <div>\n        <Navigation components={componentData.map(component => component.name)} />\n        <ComponentPage component={component} />\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/highlight.js/styles/ocean.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}